@page "/view/documents"
@using DocsWASM.Shared;
@using DocsWASM.Shared.Helpers;
@using DocsWASM.Client.AppState;
@using DocsWASM.Shared.Views;
@using System.Collections.Specialized;
@inject HttpClient Http
@inject Session _Session
@inject IJSRuntime JS
@using DocsWASM.Client.SharedComponent;
@using DocsWASM.Shared.Serializer;

<DocsWASM.Client.Pages.Views.Breadcrumb school="@school"
yearGroup="@yearGroup"
subject="@subjectId"
chapter="@chapterId"
docType="@docTypeId"
currentView="PathModels.paths.documents" />
<LoadingComponent loading="loading">
</LoadingComponent>

<h1 class="display-3" tabindex="-1">Documents</h1>

@if (documents != null)
{
	<div class="d-flex flex-column gap-3">
		@foreach (var item in documents)
		{
			<div class="featured flex-nowrap d-flex align-items-center gap-3 p-1" id=@($"d{item.DocumentId}")>
			<a class="col-2 px-2" href="/view/document/@item.DocumentId">
				<img class="imgPicture mx-auto my-2" src="data:image/webp;base64, @Convert.ToBase64String(item.ImgPreview)" />
			</a>
			<div class="col" style="min-width:0">
				<div class="d-flex flex-column">
					<div class="text-truncate">
						@if (item.Approved == 0)
						{
							<i class="bi bi-lock"></i>
						}
						<a class="ahover" href="/view/document/@item.DocumentId">
							<b>
								@item.DocumentName
							</b>
						</a>
					</div>
					<div class="text-truncate">
						<a class="ahover" href="/view/documents?school=@item.SchoolName">
							@item.SchoolName
						</a>
					</div>
					<div class="text-truncate">
						@item.OwnerUserName
					</div>
				</div>
			</div>
			<div class="col-2 d-none d-md-block">
				<div class="d-flex flex-column">
					<div class="text-truncate">
						<a class="ahover" href="/view/documents?subjectid=@item.SubjectType">
							@item.SubjectTypeName
						</a>
					</div>
					<div class="text-truncate">
						<a class="ahover text-muted" href="/view/documents?chapterid=@item.ChapterId">
							@item.ChapterName
						</a>
					</div>
				</div>
			</div>
				<div class="col-1 d-none d-lg-block">
				<div class="text-truncate">
					@item.CreatedDate.ToString("d")
				</div>
			</div>
			<div class="col-2">
				<a class="ahover d-block text-truncate" href="/view/documents?doctypeid=@item.DocType">
					@item.DocTypeName
				</a>
			</div>
			<div class="col-2">
				<div class="text-nowrap text-center">
					@item.Pages.Count()
					<i class="bi bi-file-earmark"></i>
				</div>
			</div>
		</div>
		}
	</div>
}
<style>
	.imgPicture {
		max-width:100%;
		max-height:80px;
	}
</style>

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string? school { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string? yearGroup { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string? subjectId { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string? chapterId { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string? docTypeId { get; set; }

	private List<DocumentModels.DocumentHeader> documents;
	private bool scrollToLastElement = false;

	private bool loading = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!scrollToLastElement && _Session.lastDocumentViewer != null &&
		documents?.FirstOrDefault(x => x.DocumentId == _Session.lastDocumentViewer) != null)
		{
			await JS.InvokeVoidAsync("scrollToElement", $"d{_Session.lastDocumentViewer}");
			scrollToLastElement = true;
			_Session.lastDocumentViewer = null;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		loading = true;
		var query = new NameValueCollection();
		if (school != null) query["school"] = school;
		if (yearGroup != null) query["yeargroup"] = yearGroup;
		if (subjectId != null) query["subjectid"] = subjectId;
		if (chapterId != null) query["chapterid"] = chapterId;
		if (docTypeId != null) query["doctypeid"] = docTypeId;
		var queryStrg = $"content/documents{UriHelper.ToQueryString(query)}";

		documents = DocumentHeaderListSerializer.Deserialize(await Http.GetByteArrayAsync(queryStrg));
		loading = false;
	}
}

