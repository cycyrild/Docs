@page "/view/subjects"
@inject HttpClient Http
@using DocsWASM.Shared;
@using DocsWASM.Shared.Helpers;
@using DocsWASM.Shared.Views;
@using System.Collections.Specialized;

<DocsWASM.Client.Pages.Views.Breadcrumb
school="@school"
yearGroup="@yearGroup"
currentView="PathModels.paths.subjects" />

<h1 class="display-3" tabindex="-1">Subjects</h1>



@if (subjects != null && collapsedChapterPreview!=null)
{
	<div class="d-flex flex-column gap-3">
		@foreach (var item in subjects)
		{
			<div class="d-flex flex-column gap-1">
				<div class="hoverable py-2 px-3 flex-nowrap d-flex align-items-center w-100">
					<div class="col-1">
						<div class="d-flex" style="height:20px; width:20px">
							@((MarkupString)(item.SvgLogo != null ? item.SvgLogo : ""))
						</div>
					</div>
					<a class="col anostyle" href="/view/chapters?school=@school&yearGroup=@yearGroup&subjectId=@item.Id">
						<b class="d-block text-truncate">
							@item.Name
						</b>
					</a>
					<div class="col-3 text-center" @onclick="(()=> ToogleVisibility(item.Id))" style="cursor:pointer">
						<i class=@(collapsedChapterPreview[item.Id]?"bi bi-dash-circle":"bi bi-plus-circle")></i>
					</div>
					<div class="col-2 text-end">
						@item.Count
						<i class="bi bi-files"></i>
					</div>
					
				</div>
				@if (chapters != null && collapsedChapterPreview !=null && collapsedChapterPreview.ContainsKey(item.Id))
				{
					<div class="featured p-1 @(collapsedChapterPreview[item.Id]?"d-block":"d-none")">
						@if (chapters.ContainsKey(item.Id))
						{
							<ul class="list-group list-group-flush">
								@foreach (var chapter in chapters[item.Id])
								{
									<li class="bg-transparent list-group-item">@chapter.Name</li>
								}
							</ul>							
						}
					</div>
				}
			</div>
		}
	</div>

}

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string? school { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string? yearGroup { get; set; }

	private SubjectModel[] subjects;

	private Dictionary<uint, bool> collapsedChapterPreview = new();

	private Dictionary<uint, List<ChapterModel>> chapters;

	private void ToogleVisibility(uint id)
	{
		if(collapsedChapterPreview.ContainsKey(id))
			collapsedChapterPreview[id] = !collapsedChapterPreview[id];
	}

	private async Task FillChaptersCollection()
	{
		chapters = new();
		var query = new NameValueCollection();
		if (school != null) query["school"] = school;
		if (yearGroup != null) query["yearGroup"] = yearGroup;
		var queryStrg = $"content/chapters{UriHelper.ToQueryString(query)}";

		var obj = await Http.GetFromJsonAsync<ChapterModel[]>(queryStrg);

		if (obj == null)
			return;

		foreach(var item in obj)
		{
			if (!chapters.ContainsKey(item.SubjectId))
				chapters.Add(item.SubjectId, new() { item });
			else
				chapters[item.SubjectId].Add(item);
		}
	}

	private async Task FillSubjectsCollection()
	{
		collapsedChapterPreview = new();
		var query = new NameValueCollection();
		if (school != null) query["school"] = school;
		if (yearGroup != null) query["yearGroup"] = yearGroup;
		var queryStrg = $"content/subjects{UriHelper.ToQueryString(query)}";

		subjects = await Http.GetFromJsonAsync<SubjectModel[]>(queryStrg);

		foreach (var item in subjects)
			collapsedChapterPreview[item.Id] = true;

	}

	protected override async Task OnParametersSetAsync()
	{
		await FillSubjectsCollection();
		await FillChaptersCollection();
	}
}