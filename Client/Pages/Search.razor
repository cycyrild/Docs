@page "/search"

@using DocsWASM.Shared;
@using DocsWASM.Shared.Helpers;
@using DocsWASM.Client.AppState;
@using DocsWASM.Shared.Views;
@using static DocsWASM.Shared.SearchModels
@using System.Web
@inject HttpClient Http
@using DocsWASM.Client.SharedComponent;
@implements IDisposable
@inject Actions _Actions
@using DocsWASM.Shared.Serializer;

<LoadingComponent loading="loading">
</LoadingComponent>

<div class="h1 display-3" tabindex="-1">
	Search
	<div class="text-muted d-inline-block">
		@search
	</div>
	<div class="text-muted d-inline-block display-6 fst-italic">
		@(searchResults != null ? (searchResults.Count <= 1 ? $"{searchResults.Count} element found" : $"{searchResults.Count} elements found"):"")
	</div>
</div>

@if (searchResults == null)
	return;

<div class="d-flex flex-column gap-2 mb-2">
	@foreach (var item in searchResults)
	{
		<div class="featured p-1">
			<div class="d-flex flex-column gap-1 py-2">
				<div class="flex-nowrap d-flex align-items-center gap-3 " id=@($"d{item.documentHeader.DocumentId}")>
					<a class="anostyle col-2 px-2" href="/view/document/@item.documentHeader.DocumentId">
						<img class="imgPicture mx-auto my-2" src="data:image/webp;base64, @Convert.ToBase64String(item.documentHeader.ImgPreview)" />
					</a>
					<div class="col" style="min-width:0">
						<div class="d-flex flex-column">
							<div class="text-truncate">
								@if (item.documentHeader.Approved == 0)
								{
									<i class="bi bi-lock"></i>
								}
								<a class="ahover" href="/view/document/@item.documentHeader.DocumentId">
									<b>
										@item.documentHeader.DocumentName
									</b>
								</a>
							</div>
							<div class="text-truncate">
								<a class="ahover" href="/view/documents?school=@item.documentHeader.SchoolName">
									@item.documentHeader.SchoolName
								</a>
							</div>
							<div class="text-truncate">
								@item.documentHeader.OwnerUserName
							</div>
						</div>
					</div>
					<div class="col-2 d-none d-md-block">
						<div class="d-flex flex-column">
							<div class="text-truncate">
								<a class="ahover " href="/view/documents?subjectid=@item.documentHeader.SubjectType">
									@item.documentHeader.SubjectTypeName
								</a>
							</div>
							<div class="text-truncate">
								<a class="ahover text-muted" href="/view/documents?chapterid=@item.documentHeader.ChapterId">
									@item.documentHeader.ChapterName
								</a>
							</div>
						</div>
					</div>
					<div class="col-1 d-none d-lg-block">
						<div class="text-truncate">
							@item.documentHeader.CreatedDate.ToString("d")
						</div>
					</div>
					<div class="col-2">
						<a class="d-block ahover text-truncate" href="/view/documents?doctypeid=@item.documentHeader.DocType">
							@item.documentHeader.DocTypeName
						</a>
					</div>
					<div class="col-2">
						<div class="text-nowrap text-center">
							@item.documentHeader.Pages.Count()
							<i class="bi bi-file-earmark"></i>
						</div>
					</div>
				</div>
				@if(item.pageMatchs.Count>0)
				{
					<hr class="m-2" style="border-top: 2.5px solid" />
					<div class="mx-4">
						<div class="d-flex flex-column gap-3">
							@for (int i = 0; i< item.pageMatchs.Count; i++)
							{
								var occ = item.pageMatchs.ElementAt(i);
								<div class="d-flex gap-3">
									<div class="col-1 d-flex flex-row align-items-center justify-content-center gap-3">
										<i class="bi bi-file-earmark-fill w-25"></i>
										<div class="d-block text-center w-25">
											@occ.Key
										</div>
									</div>
									<div class="d-flex flex-column d-block flex-row align-items-center gap-1" style="min-width: 0">
										@foreach(var occs in occ.Value)
										{
											<p class="m-0">
												<span class="text-muted fw-bold mx-3">…</span>
												<span class="font-monospace" style="background: #8080801f;">
													@((MarkupString)(HighlightText(occs, search)))
												</span>
												<span class="text-muted fw-bold mx-3">…</span>
											</p>
										}
									</div>
								</div>
								@if(i != item.pageMatchs.Count-1)
								{
									<hr class="mx-5 m-0">
								}
							}
						</div>
					</div>
				}

			</div>
		</div>

	}
</div>


<style>
	.imgPicture
	{
		max-width:100%;
		max-height:80px;
	}
</style>
@code {
	private List<SearchResult>? searchResults;

	[Parameter]
	[SupplyParameterFromQuery(Name = "q")]
	public string search { get; set; }

	private bool loading = false;

	public static string HighlightText(string text, string searchWord)
	{
		string encodedText = HttpUtility.HtmlEncode(text).ToLower();
		string encodedSearchWord = HttpUtility.HtmlEncode(searchWord).ToLower();
		return encodedText.Replace(encodedSearchWord, "<mark>" + encodedSearchWord + "</mark>", StringComparison.OrdinalIgnoreCase);
	}

	protected override async Task OnParametersSetAsync()
	{
		loading = true;
		if (search != "")
			searchResults =
			(SearchResultListSerializer.Deserialize
				(await Http.GetByteArrayAsync($"search/search?q={HttpUtility.UrlEncode(search)}")));
		loading = false;
	}

	void IDisposable.Dispose()
	{
		_Actions.SearchInputClear();
	}

}