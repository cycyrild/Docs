@page "/view/document/{Id:int}"
@using DocsWASM.Shared;
@using DocsWASM.Shared.Helpers;
@using System.Text;
@using System.Globalization;
@inject HttpClient Http
@using DocsWASM.Client.AppState;
@using DocsWASM.Client.SharedComponent;
@inject Actions _Actions
@inject DocumentZoom _DocumentZoom
@inject Session _Session
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IJSRuntime JS

<LoadingComponent loading="loading"></LoadingComponent>
@if (document != null)
{
	<h1 class="display-1 d-block text-truncate" style="line-height: 1.3;">@document.DocumentHeader.DocumentName</h1>
	<div class="text-nowrap mb-4" style="overflow: auto;overflow-y: hidden">
	<div class="d-flex flex-row gap-4">
		<div>
			<i class="d-inline-block bi bi-arrows-fullscreen my-auto"></i>
			<span class="d-inline-block" style="width:50px">@(((int)(_DocumentZoom.documentZoomLevel*100)) + " %") </span>
			<input class="d-inline-block" min="@(_DocumentZoom.zoomMin*100)" max="@(_DocumentZoom.zoomMax*100)" step="1" value="@(_DocumentZoom.documentZoomLevel*100)" @oninput="InputZoomChanged" type="range">
		</div>
		<div class="my-auto">
			<span class="badge rounded-pill text-bg-secondary">
				<i class="bi bi-house"></i>
				School
			</span>
			@document.DocumentHeader.SchoolName
		</div>
		<div class="my-auto">
			<span class="badge rounded-pill text-bg-info">
				<i class="bi bi-info-lg"></i>
				Subject type
			</span>
			@document.DocumentHeader.YearGroup
		</div>
		<div class="my-auto">
			<span class="badge rounded-pill text-bg-warning">
				<i class="bi bi-inbox"></i>
				Subject type
			</span>
			@document.DocumentHeader.SubjectTypeName
		</div>
		<div class="my-auto">
			<span class="badge rounded-pill text-bg-primary">
				<i class="bi bi-tags"></i>
				Chapter
			</span>
			@document.DocumentHeader.ChapterName
		</div class="my-auto">
		<div class="my-auto">
			<span class="badge rounded-pill text-bg-dark">
				<i class="bi bi-info-lg"></i>
				Document type
			</span>
			@document.DocumentHeader.DocTypeName
		</div>
		@if (document.DocumentHeader.Description != null)
		{
			<div>
				<span class="badge rounded-pill text-bg-secondary">
					<i class="bi bi-paragraph"></i>
					Description
				</span>
				@document.DocumentHeader.Description
			</div>
		}
	</div>
</div>
}

<div tabindex="0" @ref="documentViewer" class="mb-3 d-flex flex-wrap align-items-center justify-content-evenly gap-2" style="align-items: stretch">
	@if (document != null)
	{
		@for (int i = 0; i < document.DocumentHeader.Pages.Count(); i++)
		{
			var index = i;
			var item = document.Page[index];
			<div class="zoomRow">
					<img loading="lazy" class="imgPicture placeHolder mx-auto" src="data:image/webp;base64,@Convert.ToBase64String(item.PlaceHolder)"/>
					@if(_DocumentZoom.shouldRender)
					{
						<img loading="lazy" class="imgPicture mx-auto" src="@urls[i]"/>
					}

				@* position-absolute top-50 start-50 translate-middle*@
				<div class="d-flex flex-row justify-content-between">
					@if(item.IsCorrection)
					{
						<span class="badge text-bg-success my-1 d-block text-truncate">
							<i class="bi bi-check"></i>
							Correction
						</span>
					}
					else
					{
						<div></div>
					}
					<div class="text-end text-truncate">
						<i class="bi bi-file-earmark"></i>
						@item.PageNo
					</div>
				</div>
			</div>
		}
	}
</div>
<style>
	.placeHolder{
		--opacity: @(_DocumentZoom.shouldRender?"0":"100")%;
	}

	.zoomRow {
		--zoom: @(_DocumentZoom.documentZoomLevel*100)%;
	}

	.zoomRow
	{
		width: var(--zoom);	
		@(_DocumentZoom.mouseWheelZoom?"":"transition: width ease-in 125ms");
		display: block;
		margin-bottom: 25px;
	}

	.placeHolder {
		opacity: var(--opacity);
		display: @(_DocumentZoom.shouldRender?"none":"block");
		transition: opacity ease-in 125ms;
		image-rendering: pixelated;
	}

	.imgPicture
	{
		width:100%;
	}

	div:focus {
		outline: none;
		box-shadow: none;
	}
</style>

@code {
	[Parameter]
	public int Id { get; set; }
	private DocumentModele.Document document;
	private bool loading = false;
	private bool preventDefault = false;
	private ElementReference documentViewer;
	private string[] urls;

	private void InputZoomChanged(ChangeEventArgs e)
	{
		var val = (double)int.Parse((string)e.Value);
		_DocumentZoom.ChangeDocumentZoom(val/(double)100);
	}

	protected override async Task OnInitializedAsync()
	{
		loading = true;
		_DocumentZoom.RefreshZoomDocument += StateHasChanged;
		await JS.InvokeVoidAsync("pinchZoomLoad", ".zoomRow", "--zoom");
		var bytes = await Http.GetByteArrayAsync($"Document/View/{Id}");
		document = Bson.FromBson<DocumentModele.Document>(bytes);
		if (document == null) return;
		_Session.lastDocumentViewer = document.DocumentHeader.DocumentId;
		urls = await JS.InvokeAsync<string[]>("getObjectsUrls", document.Page.Select(x => new {data = x.Bin, type = DocsWASM.Shared.DocumentModele.dataBinTypesMime[x.DocBinType]}));
		loading = false;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender) await JSRuntime.InvokeVoidAsync("blazorFocusElement", documentViewer);
	}

	public async ValueTask DisposeAsync()
	{
		await JS.InvokeVoidAsync("freeObjectsUrls", new object[] { urls });
		await JS.InvokeVoidAsync("pinchZoomUnload");
		_DocumentZoom.RefreshZoomDocument -= StateHasChanged;
	}
}