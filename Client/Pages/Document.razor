@page "/view/document/{Id:int}"
@using DocsWASM.Client.SharedComponent.Document;
@using DocsWASM.Shared;
@using DocsWASM.Shared.Helpers;
@using System.Text;
@using System.Globalization;
@inject HttpClient Http
@using DocsWASM.Client.AppState;
@using DocsWASM.Client.SharedComponent;
@inject Actions _Actions
@inject DocumentZoom _DocumentZoom
@inject Session _Session
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IJSRuntime JS
@using static DocsWASM.Shared.Serializer.DocumentSerializer;
@using DocsWASM.Shared.Annotations;
@using DocsWASM.Shared.Serializer;

<LoadingComponent loading="loading"></LoadingComponent>



@if (document != null)
{
	<EditDelete 
		deleteEvent="@(async ()=> await FetchData())"
		editEvent="@(async ()=> await FetchData())"
		document="document.DocumentHeader"
		httpClient="Http" @ref="editDelete">
	</EditDelete>

	@if (document.DocumentHeader.Approved == 0 && !_Session.IsAllowedViewModerate())
	{
		<div class="p-2 bg-light rounded-1 shadow-sm position-absolute top-50 start-50 translate-middle w-75"
			style="z-index: 1;">
			<span class="d-block display-6 text-center mb-4">THIS RESOURCE IS NOT YET APPROVED</span>
			<span class="d-block h6 lead text-center">Come back later, once the resource has been verified</span>
		</div>
		<style>
			html {
			overflow: hidden;
			}
			.zoomRow {
			display:none !important
			}
		</style>
	}

	<h1 class="display-1 d-block text-truncate" style="line-height: 1.3;">@document.DocumentHeader.DocumentName</h1>
	<div class="text-nowrap mb-2" style="overflow: auto;overflow-y: hidden">
		<div class="d-flex flex-row gap-4">
			<div>
				<i class="d-inline-block bi bi-zoom-in my-auto"></i>
				<span class="d-inline-block" style="width:50px">@(((int)(_DocumentZoom.documentZoomLevel*100)) + " %") </span>
				<input class="d-inline-block" min="@(_DocumentZoom.zoomMin*100)" max="@(_DocumentZoom.zoomMax*100)" step="1" value="@(_DocumentZoom.documentZoomLevel*100)" @oninput="InputZoomChanged" type="range">
			</div>

			@if (document.DocumentHeader.Approved == 0)
			{
				<div class="my-auto" >
					<i class="bi bi-lock"></i>
					Unapproved
				</div>
			}

			@if(_Session.user!= null && (_Session.user.Id == document.DocumentHeader.OwnerUserId || _Session.IsAllowedViewModerate()))
			{
				<div class="my-auto" style="cursor:pointer" @onclick="(()=> editDelete.modal.ModalShow())">
					<span class="badge rounded-pill text-bg-primary">
						<i class="bi bi-pencil"></i>
						Edit document
					</span>
				</div>
			}
			<div class="my-auto">
				<span class="badge rounded-pill bg-secondary">
					<i class="bi bi-person"></i>
					Owner
				</span>
				@document.DocumentHeader.OwnerUserName
			</div>	
			<div class="my-auto">
				<span class="badge rounded-pill text-bg-primary">
					<i class="bi bi-clock"></i>
					Created date
				</span>
				@document.DocumentHeader.CreatedDate
			</div>
			<div class="my-auto">
				<span class="badge rounded-pill text-bg-secondary">
					<i class="bi bi-house"></i>
					School
				</span>
				@document.DocumentHeader.SchoolName
			</div>
			<div class="my-auto">
				<span class="badge rounded-pill text-bg-info">
					<i class="bi bi-info-lg"></i>
					Year group
				</span>
				@document.DocumentHeader.YearGroup
			</div>
			<div class="my-auto">
				<span class="badge rounded-pill text-bg-warning">
					<i class="bi bi-inbox"></i>
					Subject type
				</span>
				@document.DocumentHeader.SubjectTypeName
			</div>
			<div class="my-auto">
				<span class="badge rounded-pill text-bg-primary">
					<i class="bi bi-tags"></i>
					Chapter
				</span>
				@document.DocumentHeader.ChapterName
			</div class="my-auto">
			<div class="my-auto">
				<span class="badge rounded-pill text-bg-dark">
					<i class="bi bi-info-lg"></i>
					Document type
				</span>
				@document.DocumentHeader.DocTypeName
			</div>
			@if (document.DocumentHeader.Description != null)
			{
				<div>
					<span class="badge rounded-pill text-bg-secondary">
						<i class="bi bi-paragraph"></i>
						Description
					</span>
					@document.DocumentHeader.Description
				</div>
			}
		</div>
	</div>
	<div class="text-nowrap mb-4 text-black" style="overflow: auto;overflow-y: hidden">
		<div class="d-flex flex-row gap-4">
			<div class="my-auto">
				<div class="badge rounded-pill d-block @(showAnnotation?" bg-success":" text-dark")" @onclick="(()=> showAnnotation = !showAnnotation)" style="cursor:pointer">
					<i class="bi bi-pen"></i>
					Show annotations
				</div>
			</div>
			@if(!showAnnotation)
			{
				<div class="my-auto">
					<div class="badge rounded-pill d-block @(showCorrection?" bg-success":" text-dark")" @onclick="(()=> showCorrection = !showCorrection)" style="cursor:pointer">
						<i class="bi bi-check"></i>
						Show correction
					</div>
				</div>
			}
			else
			{
				<div class="my-auto">
					<div class="badge rounded-pill d-block text-bg-secondary" @onclick="SaveAnnotations" style="cursor:pointer">
						<i class="bi bi-save"></i>
						Save annotations changes
					</div>
				</div>
			}
			<div class="my-auto">
				<span class="badge rounded-pill text-bg-secondary">
					<i class="bi bi-files"></i>
					Navigate to page
				</span>
			</div>
			@for (int i = 0; i < documentPages; i++)
			{
				int index = i;

				<div class="my-auto">
					<div class="badge rounded-pill text-dark" @onclick="@(async ()=> await ScrollToElement($"p{index}"))" style="cursor:pointer">
						@if(document.Pages[index].IsCorrection)
						{
							<i class="bi bi-check"></i>
						}
						Page @(index +1)
					</div>
				</div>
			}
		</div>
	</div>

	@if (showAnnotation)
	{
		<DocsWASM.Client.Pages.Annotation.DocAnnotations document="document" urls="urls" annotations="annotations"></DocsWASM.Client.Pages.Annotation.DocAnnotations>
	}
	else
	{
		<div tabindex="0" @ref="documentViewer" class="mb-3 d-flex flex-wrap align-items-center justify-content-evenly gap-2" style="align-items: stretch">
			@for (int i = 0; i < documentPages; i++)
			{
				var index = i;
				var item = document.Pages[index];
				<section class="zoomRow @(item.IsCorrection?"correction":"")" id=@($"p{index}")>
					<div class="position-relative">
						<img class="imgPicture placeHolder mx-auto" src="data:image/webp;base64,@Convert.ToBase64String(item.PlaceHolder)"/>

						@if(_DocumentZoom.shouldRender)
						{
							<img class="imgPicture mx-auto" src="@urls[i]"/>
						}
					</div>

					<div class="d-flex flex-row gap-1">
						@if(item.IsCorrection)
						{
							<span class="badge text-bg-success my-1 d-block text-truncate">
								<i class="bi bi-check"></i>
								Correction
							</span>
						}
						else
						{
							<div></div>
						}
						<div class="text-end text-truncate">
							<i class="bi bi-file-earmark"></i>
							@item.PageNo
						</div>
					</div>
				</section>
			}
		</div>
	}
}
<style>
	.placeHolder{
		--opacity: @(_DocumentZoom.shouldRender?"0":"100")%;
	}

	.zoomRow {
		--zoom: @(_DocumentZoom.documentZoomLevel*100)%;
	}

	.correction {
		display:@(showCorrection?"visible":"none") !important;
	}

	.zoomRow
	{
		width: var(--zoom);	
		@(_DocumentZoom.mouseWheelZoom?"":"transition: width ease-in 125ms");
		display: block;
		margin-bottom: 25px;
	}

	.placeHolder {
		opacity: var(--opacity);
		display: @(_DocumentZoom.shouldRender?"none":"block");
		transition: opacity ease-in 125ms;
	}

	.imgPicture
	{
		width:100%;
	}

	div:focus {
		outline: none;
		box-shadow: none;
	}
</style>

@code {
	[Parameter]
	public int Id { get; set; }

	private DocumentModels.Document document;
	private bool loading = false;
	private bool preventDefault = false;
	private ElementReference documentViewer;
	private string[] urls;
	private int documentPages;
	private bool editDocument = false;
	private EditDelete? editDelete;
	private bool showCorrection = true;
	private bool showAnnotation = false;
	private Dictionary<uint, List<DocsWASM.Shared.Annotations.Annotation>> annotations;

	private async Task SaveAnnotations()
	{
		var aa = annotations.Values.SelectMany(x => x).ToList();
		var content = new ByteArrayContent(AnnotationListSerializer.Serialize(aa));
		var result = await Http.PostAsync($"annotations/send?docId={Id}", content);
		if (result.StatusCode == System.Net.HttpStatusCode.OK)
		{
			await FetchData();
		}
	}

	private async Task FetchData()
	{
		document = null;
		loading = true;
		StateHasChanged();
		var request = await Http.GetAsync($"Document/View/{Id}");
		if(request.StatusCode == System.Net.HttpStatusCode.OK)
		{
			document = Deserialize(await request.Content.ReadAsByteArrayAsync());
			documentPages = document.Pages.Count();
			_Session.lastDocumentViewer = document.DocumentHeader.DocumentId;
			urls = await JS.InvokeAsync<string[]>("getObjectsUrls", document.Pages.Select(x => new {data = x.Bin, type = DocsWASM.Shared.DocumentModels.dataBinTypesMime[x.DocBinType]}));

			annotations = new();

			foreach (var page in document.Pages)
			{
				var pageAnnotations = document.Annotations.Where(a => a.PageId == page.Id);
				if (pageAnnotations.Any())
				{
					annotations[page.PageNo] = pageAnnotations.ToList();
				}
			}
		}

		loading = false;
		StateHasChanged();
	}

	private async Task ScrollToElement(string id)
	{
		await JS.InvokeVoidAsync("scrollToElement", id);
	}

	private void InputZoomChanged(ChangeEventArgs e)
	{
		var val = (double)int.Parse((string)e.Value);
		_DocumentZoom.ChangeDocumentZoom(val/(double)100);
	}

	protected override async Task OnInitializedAsync()
	{
		_DocumentZoom.RefreshZoomDocument += StateHasChanged;

		await JS.InvokeVoidAsync("pinchZoomLoad", ".zoomRow", "--zoom");
		await FetchData();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender) await JSRuntime.InvokeVoidAsync("blazorFocusElement", documentViewer);
	}

	public async ValueTask DisposeAsync()
	{
		if(urls != null)
			await JS.InvokeVoidAsync("freeObjectsUrls", new object[] { urls });
		await JS.InvokeVoidAsync("pinchZoomUnload");
		_DocumentZoom.RefreshZoomDocument -= StateHasChanged;
	}
}